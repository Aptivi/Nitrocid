<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple 
    name/value pairs.

    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.

    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
        <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="metadata">
            <xsd:complexType>
                <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
                </xsd:sequence>
                <xsd:attribute name="name" use="required" type="xsd:string" />
                <xsd:attribute name="type" type="xsd:string" />
                <xsd:attribute name="mimetype" type="xsd:string" />
                <xsd:attribute ref="xml:space" />
            </xsd:complexType>
            </xsd:element>
            <xsd:element name="assembly">
            <xsd:complexType>
                <xsd:attribute name="alias" type="xsd:string" />
                <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
            </xsd:element>
            <xsd:element name="data">
            <xsd:complexType>
                <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                </xsd:sequence>
                <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
                <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                <xsd:attribute ref="xml:space" />
            </xsd:complexType>
            </xsd:element>
            <xsd:element name="resheader">
            <xsd:complexType>
                <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                </xsd:sequence>
                <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
            </xsd:element>
        </xsd:choice>
        </xsd:complexType>
    </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
    <value>2.0</value>
    </resheader>
    <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
      <data name="NKS_COLORCONVERT_REDCOLOR" xml:space="preserve">
    <value>Color ruber gradu:</value>
  </data>
  <data name="NKS_COLORCONVERT_GREENCOLOR" xml:space="preserve">
    <value>Color viridis gradus:</value>
  </data>
  <data name="NKS_COLORCONVERT_BLUECOLOR" xml:space="preserve">
    <value>Color caeruleus planus;</value>
  </data>
  <data name="NKS_COLORCONVERT_CYANCOLOR" xml:space="preserve">
    <value>Cyan planities;</value>
  </data>
  <data name="NKS_COLORCONVERT_MAGENTACOLOR" xml:space="preserve">
    <value>Magenta planities;</value>
  </data>
  <data name="NKS_COLORCONVERT_YELLOWCOLOR" xml:space="preserve">
    <value>Flavo gradu:</value>
  </data>
  <data name="NKS_COLORCONVERT_HUE" xml:space="preserve">
    <value>Hue:</value>
  </data>
  <data name="NKS_COLORCONVERT_SATURATION" xml:space="preserve">
    <value>Saturatio:</value>
  </data>
  <data name="NKS_COLORCONVERT_VALUE" xml:space="preserve">
    <value>Precium:</value>
  </data>
  <data name="NKS_COLORCONVERT_YELLOWCOLOR" xml:space="preserve">
    <value>Flavus color planus;</value>
  </data>
  <data name="NKS_COLORCONVERT_LUMA" xml:space="preserve">
    <value>Luma:</value>
  </data>
  <data name="NKS_COLORCONVERT_INPHASE" xml:space="preserve">
    <value>In- dam;</value>
  </data>
  <data name="NKS_COLORCONVERT_QUADRATURE" xml:space="preserve">
    <value>Quadratura:</value>
  </data>
  <data name="NKS_COLORCONVERT_UCHROMA" xml:space="preserve">
    <value>U-Chroma:</value>
  </data>
  <data name="NKS_COLORCONVERT_VCHROMA" xml:space="preserve">
    <value>V-Chroma:</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_COLORTO_DESC" xml:space="preserve">
    <value>Fons colori exemplar vertit ad exemplar colorum in numeris.</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_COLORTOKS_DESC" xml:space="preserve">
    <value>Fons color exemplar vertit ad exemplar scopo coloris in KS format.</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_COLORTOHEX_DESC" xml:space="preserve">
    <value>Exemplar fontis colorem ad hex convertit.</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_COLORSPECTO_DESC" xml:space="preserve">
    <value>Fons colori exemplar vertit ad speciem coloris speciei ad exemplar scopo coloratum.</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_COLORSPECTOKS_DESC" xml:space="preserve">
    <value>Fons colori exemplar vertit ad speciem coloris speciei ad exemplar in KS formato colore scopo.</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_COLORSPECTOHEX_DESC" xml:space="preserve">
    <value>Fons colori exemplar vertit ad speciem coloris speciei ad exemplar in hex scopo coloratum.</value>
  </data>
  <data name="NKS_COLORCONVERT_INVALIDMODEL" xml:space="preserve">
    <value>Exemplar specificatio invalida est.</value>
  </data>
  <data name="NKS_COLORCONVERT_BLACKKEY" xml:space="preserve">
    <value>Gradu clavis nigri:</value>
  </data>
  <data name="NKS_COLORCONVERT_FIRSTLEVELNUMERIC" xml:space="preserve">
    <value>Primus color gradu numerorum esse debet.</value>
  </data>
  <data name="NKS_COLORCONVERT_SECONDLEVELNUMERIC" xml:space="preserve">
    <value>Secundum gradum color numerorum esse oportet.</value>
  </data>
  <data name="NKS_COLORCONVERT_THIRDLEVELNUMERIC" xml:space="preserve">
    <value>Tertius color gradus debet esse numerorum.</value>
  </data>
  <data name="NKS_COLORCONVERT_FOURTHLEVELNUMERIC" xml:space="preserve">
    <value>Quartus gradus clavis numerorum esse debet.</value>
  </data>
  <data name="NKS_COLORCONVERT_LUMINANCE" xml:space="preserve">
    <value>Lumen (Levitas);</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_ARGUMENT_SOURCEMODELNAME_DESC" xml:space="preserve">
    <value>Fons color exemplum</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_ARGUMENT_TARGETMODELNAME_DESC" xml:space="preserve">
    <value>Scopum color exemplum</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_ARGUMENT_NUMBER1_DESC" xml:space="preserve">
    <value>Primum numerum</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_ARGUMENT_NUMBER2_DESC" xml:space="preserve">
    <value>Secundus numerus</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_ARGUMENT_NUMBER3_DESC" xml:space="preserve">
    <value>Tertius numerus</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_ARGUMENT_NUMBER4_DESC" xml:space="preserve">
    <value>Quartus numerus</value>
  </data>
  <data name="NKS_COLORCONVERT_COMMAND_ARGUMENT_SPECIFIER_DESC" xml:space="preserve">
    <value>Color speciei</value>
  </data>

</root>

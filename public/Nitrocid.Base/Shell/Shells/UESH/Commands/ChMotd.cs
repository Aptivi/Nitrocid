//
// Nitrocid KS  Copyright (C) 2018-2025  Aptivi
//
// This file is part of Nitrocid KS
//
// Nitrocid KS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Nitrocid KS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY, without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

using Terminaux.Colors.Themes.Colors;
using Terminaux.Writer.ConsoleWriters;
using Terminaux.Shell.Commands;
using Terminaux.Shell.Shells;
using Nitrocid.Base.Kernel.Debugging;
using Nitrocid.Base.Languages;
using Nitrocid.Base.Users;
using Nitrocid.Base.Users.Login.Motd;
using Nitrocid.Base.Kernel.Exceptions;
using Nitrocid.Base.Security.Permissions;
using Nitrocid.Base.Files.Paths;

namespace Nitrocid.Base.Shell.Shells.UESH.Commands
{
    /// <summary>
    /// You can change your message of the day
    /// </summary>
    /// <remarks>
    /// If you don't like the default message of the day that is generated by the kernel, then you can use this command to change the message and store it permanently on the config file.
    /// <br></br>
    /// It also has placeholder support, like if you have <c>&lt;shortdate&gt;</c> and <c>&lt;longtime&gt;</c> placeholders, the <c>&lt;shortdate&gt;</c> placeholder changes to the current system date in the MM/DD/YYYY form, and the <c>&lt;longtime&gt;</c> placeholder changes to the current system time in the HH:MM:SS AM/PM form.
    /// <br></br>
    /// If no arguments are specified, the text editor shell will open to the path of MOTD text file.
    /// <br></br>
    /// The user must have at least the administrative privileges before they can run the below commands.
    /// </remarks>
    class ChMotdCommand : BaseCommand, ICommand
    {

        public override int Execute(CommandParameters parameters, ref string variableValue)
        {
            if (!PermissionsTools.IsPermissionGranted(PermissionTypes.RunStrictCommands) &&
                !UserManagement.CurrentUser.Flags.HasFlag(UserFlags.Administrator))
            {
                DebugWriter.WriteDebug(DebugLevel.W, "Cmd exec {0} failed: adminList(signedinusrnm) is False, strictCmds.Contains({0}) is True", vars: [parameters.CommandText]);
                TextWriterColor.Write(LanguageTools.GetLocalized("NKS_SHELL_SHELLS_NEEDSPERM"), true, ThemeColorType.Error, parameters.CommandText);
                return -4;
            }

            if (parameters.ArgumentsList.Length > 0)
            {
                if (string.IsNullOrEmpty(parameters.ArgumentsText))
                {
                    TextWriterColor.Write(LanguageTools.GetLocalized("NKS_SHELL_SHELLS_UESH_CHMOTD_BLANK"), true, ThemeColorType.Error);
                    return KernelExceptionTools.GetErrorCode(KernelExceptionType.MOTD);
                }
                else
                {
                    TextWriterColor.Write(LanguageTools.GetLocalized("NKS_SHELL_SHELLS_UESH_CHMOTD_PROGRESS"));
                    MotdParse.SetMotd(parameters.ArgumentsText);
                    return 0;
                }
            }
            else
            {
                ShellManager.StartShell("TextShell", PathsManagement.GetKernelPath(KernelPathType.MOTD));
                TextWriterColor.Write(LanguageTools.GetLocalized("NKS_SHELL_SHELLS_UESH_CHMOTD_PROGRESS"));
                MotdParse.ReadMotd();
                return 0;
            }
        }

    }
}
